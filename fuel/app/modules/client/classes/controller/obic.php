<?php
namespace Client;
use \Controller\Exception;

class Controller_Obic extends \Controller_Common {
	public function before() {
		parent::before();
		if(!\Package::loaded('excel')){
			\Package::load("excel");
		}

		$this->formatTitleHeader = ['font' => [
										'name' => 'Times New Roman',
										'bold' => true,
										'italic' => false,
										'size' => 10,
										'color' => ['rgb'=>  \PHPExcel_Style_Color::COLOR_WHITE]
									],
									'alignment' => [
										'horizontal' =>  \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
										'vertical' => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
										'wrap' => false
									]];
    }

    /*=============================================================
     * Author: Hoang Phong Phu
     * Function export file obic
     * Method GET
     * Params: date: export date,
     		   type: m_petition_status_id = 10,
     		   expense_type_code: 0|1
     * Table t_request
     *=============================================================*/
	public function action_export_obic(){
		$objPHPExcel = new \PHPExcel();
		//add header
        $header = [
            '会社NO', '伝票番号', '発生日', 'システム分類', 'サイト番号', '仕訳区分', '伝票区分', '事業所コード', '行番号', '借方総勘定科目コード',
            '借方補助科目コード', '借方補助内訳科目コード', '借方部門コード', '借方取引先コード', '借方税区分', '借方税込区分',
            '借方金額', '借方消費税額', '借方消費税本体科目コード', '借方分析コード1', '借方分析コード2', '借方分析コード3', '借方分析コード4', '借方分析コード5',
            '借方資金コード', '借方プロジェクトコード', '貸方総勘定科目コード', '貸方補助科目コード', '貸方補助内訳科目コード', '貸方部門コード',
            '貸方取引先コード', '貸方税区分', '貸方税込区分', '貸方金額', '貸方消費税額', '貸方消費税本体科目コード',
            '貸方分析コード1', '貸方分析コード2', '貸方分析コード3', '貸方分析コード4', '貸方分析コード5', '貸方資金コード',
            '貸方プロジェクトコード', '明細摘要', '伝票摘要', 'ユーザID', '借方事業所コード', '貸方事業所コード'
        ];

        $objPHPExcel->getProperties()->setCreator('VisionVietnam')
                                        ->setLastModifiedBy('Phong Phu')
                                        ->setTitle('Office 2007 Document')
                                        ->setSubject('Office 2007 Document')
                                        ->setDescription('Document has been generated by PHP')
                                        ->setKeywords('Office 2007 openxml php')
                                        ->setCategory('OBIC File');
        $last_column = null;
        $explicit = [7,8,10,11,12,13,15,16,27,28,29,30,32];

        foreach($header as $i=>$v){
			$column = \PHPExcel_Cell::stringFromColumnIndex($i);
			$objPHPExcel->setActiveSheetIndex(0)->setCellValue($column.'1',$v);
			$objPHPExcel->getActiveSheet()->getStyle($column.'1')
						->applyFromArray([
						    'font' => [
						        'name' => 'Times New Roman',
						        'bold' => true,
						        'italic' => false,
						        'size' => 10,
						        'color' => ['rgb'=>  \PHPExcel_Style_Color::COLOR_WHITE]
						    ],
						    'alignment' => [
						        'horizontal' =>  \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						        'vertical' => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
						        'wrap' => false
						    ]
						]);
            switch($i+1){
                case 4:
                case 15:
                case 16:
                case 18:
                    $width = 20;
                    break;
                case 13:
                case 14:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 30:
                case 31:
                    $width = 25;
                    break;
                case 10:
                case 11:
                case 12:
                case 19:
                case 26:
                case 27:
                case 28:
                    $width = 30;
                    break;
                case 29:
                case 44:
                case 45:
                    $width = 40;
                    break;
                default:
                    $width = 15;
                    break;
            }
            $objPHPExcel->getActiveSheet()->getColumnDimension($column)->setWidth($width);
            $last_column = $column;
        }
        //decode params
        $param = \Input::param();
        parse_str(base64_decode($param['p']), $params);
        //get form payment content
        $rows = $this->generate_content($params);
        $i = 0;
        foreach($rows as $row){
			foreach($row as $k=>$v){
				$column = \PHPExcel_Cell::stringFromColumnIndex($k);
				if(in_array($k+1,$explicit)){
					$objPHPExcel->setActiveSheetIndex()->setCellValueExplicit($column.($i+2),$v,\PHPExcel_Cell_DataType::TYPE_STRING);
				}else{
					$objPHPExcel->setActiveSheetIndex()->setCellValue($column.($i+2),$v);
				}
			}
			$i++;
		}

		$objPHPExcel->getActiveSheet()->getStyle('A1:'.$last_column.'1')->getFill()->setFillType(\PHPExcel_Style_Fill::FILL_SOLID);
        $objPHPExcel->getActiveSheet()->getStyle('A1:'.$last_column.'1')->getFill()->getStartColor()->setRGB('5f5f5f');

		$objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
		ob_end_clean();

		header("Last-Modified: ". gmdate("D, d M Y H:i:s") ." GMT");
        header("Cache-Control: max-age=0");
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="obic-'.date('Y-m-d').'.xls"');
        $objWriter->save('php://output');
		exit;
    }

	protected function generate_content($params){
		$content = $ids = [];
		//get forms have m_petition_status_id is 10 and obic_outeput_date is null
		$query = \DB::select('SM.id')
				->from(['t_request','SM'])
				->where('m_request_menu_id','NOT IN', [2,3])
				->where('m_petition_status_id', '=', 10)
				->where('obic_outeput_date', 'IS', \DB::expr('NULL'))
				->where('item_status', '=', 'active')
				->order_by('code','asc');
		$records = $query->execute()->as_array();

		//set export date
		$export_date = $params['date'];
		$date_parse = date_parse_from_format('Y/m/d',$export_date);
		$present = mktime(0,0,0,$date_parse['month'],1,$date_parse['year']);
		//set prefix for column_44 content
		$prefix = date('Y/m',$present);
		//initial variable $index
		$index = 1;

		//set kari fields
		$kari_keys = [
			'karikata_sokanjokamoku_cd' => null,
			'karikata_hojokamoku_cd' => null,
			'karikata_hojouchiwakekamoku_cd' => null,
			'karikata_torihikisaki_cd' => null,
			'karikata_zei_kubun' => null,
			'karikata_zeikomi_kubun' => null,
			'karikata_bunseki_cd1' => null
		];

		//set expense_type_code
		$expense_type_code = $params['expense_type_code'];
		foreach($records as $record){
			$api_res = json_decode($this->rest->request('trequest/detail/' . $record['id'] . '?export_obic=1', 'get'));
			if($api_res->status == 'success'){
				$payment = $api_res->data;
				if(empty($payment)) continue;
				//get cost divide
				$cost_divide = $payment->t_cost_divide;
				//get user department code
				$department_code = $payment->user_create_form->department_code;
				//get data from table m_obic_client_department to check form is belongs or not belongs to vision
				$client_department = \DB::select('SM.id','SM.client_code')
											->from(['m_obic_client_department','SM'])
											->where('m_department_id','=', $payment->user_create_form->department_id)
											->where('item_status','=','active')
											->execute()
											->current();

				//set pattern
				if(empty($client_department)){
					//department belongs to vision
					$pattern = ($payment->type == 1) ? ($cost_divide ? 'c' : 'a') : 'e';
					//set client_type
					$client_type = '01';
				}else{
					//department not belongs to vision
					$pattern = ($payment->type == 1) ? ($cost_divide ? 'd' : 'b') : 'f';
					//set client_type
					$client_type = '90';
				}

				//form has suspense_payments
				if($suspense_payments = number_format($payment->cor_suspense_payments)){
					//0 is equal, 1 is amount is greater than suspense_payments, 2 is amount is less than suspense_payments
					if($payment->cor_suspense_payments > $payment->cor_amount){
						$result = 2;
					}elseif($payment->cor_suspense_payments < $payment->cor_amount){
						$result = 1;
					}else{
						$result = 0;
					}
				}

				switch($payment->request_menu_code){
					//form transportation
					case '200101':
					case '200401':
					case '200501':
						$is_form_travel = in_array($payment->request_menu_code, ['200401', '200501']);
						$transports = $this->get_transportation_data($payment->t_request_transport_spec, $client_type, $cost_divide, $is_form_travel);
						if(in_array($payment->request_menu_code,['200401','200501'])){
							$traveling_expense = $this->get_traveling_data($payment->t_request_traveling_expenses, $client_type, $cost_divide);
							$items = array_merge($traveling_expense['items'], $transports['items']);
						}else{
							$items = $transports['items'];
						}

						if($items){
							//get last element and insert to end of array items
							if(in_array($pattern,['a','b','c','d']) && $suspense_payments && isset($result) && $result){
								$element = end($items);
								array_push($items, $element);
							}
							//loop to generate array content
							//$i is start pointer of array items
							$i = 0;
							//$j is end pointer of array items
							$j = count($items) - 1;
							foreach($items as $item){
								$first_row = ($i == 0);

								$obic_kashi = array_intersect_key($item, $kari_keys);
								//re-assign value of $pattern and $client_type
								if(($payment->request_menu_code == '200101' && $payment->t_cost_divide) || ($is_form_travel && count($payment->t_cost_divide) == 1)){
									$client_department = \DB::select('client_code')
															->from('m_obic_client_department')
															->where('m_department_id', '=', $item['m_department_id'])
															->execute()
															->current();
									if(empty($client_department)){
										$pattern = 'c';
										$client_type = '01';
									}else{
										$pattern = 'd';
										$client_type = '90';
									}
									$obic_kashi = $this->get_obic_kashi($item['m_expense_item_id'], $client_type);
								}
								//set content to column_13
								$column_13 = 10000;
								if($pattern == 'a'){
									$column_13 = $department_code;
								}elseif($pattern == 'c'){
									$column_13 = $item['department_code'] ?: $department_code;
								}
								//set content to column_14
								$column_14 = $client_department ? $client_department['client_code'] : 'ZA0005';
								//set content to column_44
								$column_44 = $this->generate_summary_content($pattern, $prefix, $item['item'], $department_code, $item['department_code'] ?: $department_code, $payment->user_create_form->fullname);
								//set content column_17, column_18
								if($item['karikata_zei_kubun']==0 && $item['karikata_zeikomi_kubun']==0){
									$column_17 = $item['tax'] + ($item['before_tax'] ?: 0);
									$column_18 = null;
								}else{
									$column_17 = $item['before_tax'];
									$column_18 = $item['tax'];
								}

								//set content when form request has not suspense_payments
								if($suspense_payments == 0 || in_array($pattern, ['e','f'])){
									if($first_row){
										$kari_values = \Model_MObicKari::query()->where('expense_type_code', '=', $expense_type_code)->get_one()->to_array();
										$kari = array_intersect_key($kari_values, $kari_keys);
										$column_34 = $payment->cor_suspense_payments + $payment->cor_settlement_amount;
									}else{
										$kari = $kari_keys;
										$column_34 = null;
									}
									$kashi = array_intersect_key($obic_kashi, $kari_keys);
								}

								//set content when form request has suspense_payments
								if(in_array($pattern,['a','b','c','d']) && $suspense_payments && isset($result)){
									if($result == 0){
										if($first_row){
											$kari_values = $this->get_obic_karibarai_kashi(0);
											$kari = array_intersect_key($kari_values, $kari_keys);
											$column_34 = $payment->cor_suspense_payments;
										}else{
											$kari = $kari_keys;
											$column_34 = null;
										}
										$kashi = array_intersect_key($obic_kashi, $kari_keys);
									}else{
										if($first_row){
											$kari_values = $this->get_obic_karibarai_kashi(0);
											$kari = array_intersect_key($kari_values, $kari_keys);
											$kashi = array_intersect_key($obic_kashi, $kari_keys);
											$column_34 = $payment->cor_suspense_payments;
										}elseif($i==$j){
											if($result==2){
												$kashi_values = $this->get_obic_karibarai_kashi(9);
												$kashi = array_intersect_key($kashi_values, $kari_keys);
												$kari = $kari_keys;
												$kari['karikata_bunseki_cd1'] = $kashi['karikata_bunseki_cd1'];
												$column_13 = 10000;
												$column_14 = $kashi['karikata_torihikisaki_cd'];
												$column_17 = abs($payment->cor_settlement_amount);
												$column_18 = $column_34 = null;
											}else{
												$kari_values = \Model_MObicKari::query()->where('expense_type_code', $expense_type_code)->get_one()->to_array();
												$kari = array_intersect_key($kari_values, $kari_keys);
												$kashi = $kari_keys;
												$column_34 = abs($payment->cor_settlement_amount);
												$column_13 = $column_14 = $column_17 = $column_18 = null;
											}
											$column_44 = $this->generate_summary_content('e', $prefix, null, null, null, $payment->user_create_form->fullname);
										}else{
											$kari = $kari_keys;
											$kashi = array_intersect_key($obic_kashi, $kari_keys);
											$column_34 = null;
										}
									}
								}
								//put content
								$content[] = [
									1,'T'.date('ymdhi'),$export_date,10,null,0,10,'000',$index,
									$kashi['karikata_sokanjokamoku_cd'],$kashi['karikata_hojokamoku_cd'],$kashi['karikata_hojouchiwakekamoku_cd'],
									$column_13,$column_14,$kashi['karikata_zei_kubun'],$kashi['karikata_zeikomi_kubun'],
									$column_17,$column_18,null,null,null,null,null,null,null,null,
									$kari['karikata_sokanjokamoku_cd'],$kari['karikata_hojokamoku_cd'],$kari['karikata_hojouchiwakekamoku_cd'],
									10000,$kari['karikata_torihikisaki_cd'],$kari['karikata_zei_kubun'],$kari['karikata_zeikomi_kubun'],
									$column_34,null,null,$kari['karikata_bunseki_cd1'],null,null,null,null,null,null,
									$column_44,$export_date.'【計上】立替精算',null,null,null
								];

								$i++;
								//increase index value
								$index++;
							}//end foreach
						}//end if
	        			break;
	        		case '200601':
						$reception_spec = $this->get_purchase_data($payment->t_purchase_reception_spec, $payment->t_cost_divide);

						//form request has pattern e,f, create new array
						if(empty($reception_spec['items']) && in_array($pattern,['e','f'])){
							$reception_spec = [
								'items' => [
									[
										'tax' => $payment->cor_suspense_payments,
										'before_tax' => null,
										'm_department_id' => null,
										'department_code' => null
									]
								],
								'amount' => $payment->cor_suspense_payments
							];
						}

						if($items = $reception_spec['items']){
							if(in_array($pattern,['a','b','c','d']) && $suspense_payments && isset($result) && $result){
								$element = end($items);
								array_push($items, $element);
							}
							//loop to generate array content
							$i = 0;
							$j = count($items) - 1;
							foreach($items as $item){
								$first_row = ($i == 0);
								//re-assign value of $pattern and $client_type
								if($payment->t_cost_divide){
									$client_department = \DB::select('client_code')
															->from('m_obic_client_department')
															->where('m_department_id', '=', $item['m_department_id'])
															->execute()
															->current();
									if(empty($client_department)){
										$pattern = 'c';
										$client_type = '01';
									}else{
										$pattern = 'd';
										$client_type = '90';
									}
								}
								//get data from table m_obic_kashi
								$obic_kashi = $this->get_obic_kashi($payment->m_expense_item_id, $client_type);
								//get item from table m_expense_item
								$m_expense_item = \DB::select('item')
													->from('m_expense_item')
													->where('id', $payment->m_expense_item_id)
													->execute()
													->current();
								//set content to column_13
								$column_13 = 10000;
								if($pattern == 'a'){
									$column_13 = $department_code;
								}elseif($pattern == 'c'){
									$column_13 = $item['department_code'] ?: $department_code;
								}
								//set content to column_14
								$column_14 = $client_department ? $client_department['client_code'] : 'ZA0005';
								//set content to column_44
								$column_44 = $this->generate_summary_content($pattern, $prefix, $m_expense_item['item'], $department_code, $item['department_code'] ?: $department_code, $payment->user_create_form->fullname);
								//set content column_17, column_18
								if($obic_kashi['karikata_zei_kubun'] == 0 && $obic_kashi['karikata_zeikomi_kubun'] == 0){
									$column_17 = $item['tax'] + ($item['before_tax'] ?: 0);
									$column_18 = null;
								}else{
									$column_17 = $item['before_tax'];
									$column_18 = $item['tax'];
								}
								//set content column_17, column_18 when form is e or f
								if(in_array($pattern,['e','f'])){
									$column_17 = $item['tax'];
									$column_18 = null;
								}
								//set content when form request has not suspense_payments
								if((in_array($pattern,['a','b','c','d']) && $suspense_payments == 0) || in_array($pattern,['e','f'])){
									if($first_row){
										$kari_values = \Model_MObicKari::query()->where('expense_type_code', '=', $expense_type_code)->get_one()->to_array();
										$kari = array_intersect_key($kari_values,$kari_keys);
										$column_34 = $reception_spec['amount'];
									}else{
										$kari = $kari_keys;
										$column_34 = null;
									}
									if(in_array($pattern,['e','f']) && count($items)==1){
										$obic_kashi = \Model_MObicKaribaraiKari::query()->where('expense_type_code','=',0)->get_one()->to_array();
									}
									$kashi = $obic_kashi ? array_intersect_key($obic_kashi, $kari_keys) : $kari_keys;
								}
								//set content when form request has suspense_payments
								if(in_array($pattern,['a','b','c','d']) && $suspense_payments && isset($result)){
									if($result == 0){
										if($first_row){
											$kari_values = $this->get_obic_karibarai_kashi(0);
											$kari = array_intersect_key($kari_values, $kari_keys);
											$column_34 = $payment->cor_suspense_payments;
										}else{
											$kari = $kari_keys;
											$column_34 = null;
										}
										$kashi = array_intersect_key($obic_kashi, $kari_keys);
									}else{
										if($first_row){
											$kari_values = $this->get_obic_karibarai_kashi(0);
											$kari = array_intersect_key($kari_values, $kari_keys);
											$kashi = array_intersect_key($obic_kashi, $kari_keys);
											$column_34 = $payment->cor_suspense_payments;
										}elseif($i == $j){
											if($result == 2){
												$kari_values = $this->get_obic_karibarai_kashi(9);
												$kashi = array_intersect_key($kashi_values, $kari_keys);
												$kari = $kari_keys;
												$kari['karikata_bunseki_cd1'] = $kashi['karikata_bunseki_cd1'];
												$column_13 = 10000;
												$column_14 = $kashi['karikata_torihikisaki_cd'];
												$column_17 = abs($payment->cor_settlement_amount);
												$column_18 = $column_34 = null;
											}else{
												$kari_values = \Model_MObicKari::query()->where('expense_type_code', $expense_type_code)->get_one()->to_array();
												$kari = array_intersect_key($kari_values, $kari_keys);
												$kashi = $kari_keys;
												$column_34 = abs($payment->cor_settlement_amount);
												$column_13 = $column_14 = $column_17 = $column_18 = null;
											}
											$column_44 = $this->generate_summary_content('e', $prefix, null, null, null, $payment->user_create_form->fullname);
										}else{
											$kari = $kari_keys;
											$kashi = array_intersect_key($obic_kashi, $kari_keys);
											$column_34 = null;
										}
									}
								}
								//put content
								$content[] = [
									1,'T'.date('ymdhi'),$export_date,10,null,0,10,'000',$index,
									$kashi['karikata_sokanjokamoku_cd'],$kashi['karikata_hojokamoku_cd'],$kashi['karikata_hojouchiwakekamoku_cd'],
									$column_13,$column_14,$kashi['karikata_zei_kubun'],$kashi['karikata_zeikomi_kubun'],
									$column_17,$column_18,null,null,null,null,null,null,null,null,
									$kari['karikata_sokanjokamoku_cd'],$kari['karikata_hojokamoku_cd'],$kari['karikata_hojouchiwakekamoku_cd'],
									10000,$kari['karikata_torihikisaki_cd'],$kari['karikata_zei_kubun'],$kari['karikata_zeikomi_kubun'],
									$column_34,null,null,$kari['karikata_bunseki_cd1'],null,null,null,null,null,null,
									$column_44,$export_date.'【計上】立替精算',null,null,null
								];

								$i++;
								//increase index value
								$index++;
							}//end foreach
						}
						break;
					case '200801':
					case '200901':
	        			$reception_spec = $this->get_purchase_data($payment->t_purchase_reception_spec, $payment->t_cost_divide);
	        			if($items = $reception_spec['items']){
	        				if(in_array($pattern,['a','b','c','d']) && $suspense_payments && isset($result) && $result){
								$element = end($items);
								array_push($items, $element);
							}
							//loop to generate array content
							//$i is start pointer of array items
							$i = 0;
							//$j is last row
							$j = count($items) - 1;
							foreach($items as $item){
								$first_row = ($i == 0);
								if($payment->t_cost_divide){
									$client_department = \DB::select('client_code')
															->from('m_obic_client_department')
															->where('m_department_id', '=', $item['m_department_id'])
															->execute()
															->current();
									if(empty($client_department)){
										$pattern = 'c';
										$client_type = '01';
									}else{
										$pattern = 'd';
										$client_type = '90';
									}
								}
								//get data from table m_obic_kashi
								$obic_kashi = $this->get_obic_kashi($payment->t_request_dietary->m_expense_item_id, $client_type);
								//get item from table m_expense_item
								$m_expense_item = \DB::select('item')
													->from('m_expense_item')
													->where('id', $payment->t_request_dietary->m_expense_item_id)
													->execute()
													->current();
								//set content to column_13
								$column_13 = 10000;
								if($pattern == 'a'){
									$column_13 = $department_code;
								}elseif($pattern == 'c'){
									$column_13 = $item['department_code'] ?: $department_code;
								}
								//set content to column_14
								$column_14 = $client_department ? $client_department['client_code'] : 'ZA0005';
								//re-assign content column_13, column_14 if m_expense_item_id is 18 (item_name_code = 0501)
								if(in_array($pattern,['a','c']) && $payment->t_request_dietary->m_expense_item_id == 18){
									$column_13 = 10000;
									$column_14 = \DB::select('kashikata_torihikisaki_cd')
													->from('m_obic_karibarai_kashi')
													->where('expense_type_code',9)
													->execute()
													->get('kashikata_torihikisaki_cd');
								}
								//set content to column_44
								$column_44 = $this->generate_summary_content($pattern, $prefix, $m_expense_item['item'], $department_code, $item['department_code'] ?: $department_code, $payment->user_create_form->fullname);
								//set content column_17, column_18
								if($obic_kashi['karikata_zei_kubun'] == 0 && $obic_kashi['karikata_zeikomi_kubun'] == 0){
									$column_17 = $item['tax'] + ($item['before_tax'] ?: 0);
									$column_18 = null;
								}else{
									$column_17 = $item['before_tax'];
									$column_18 = $item['tax'];
								}

								//set content when form request has not suspense_payments
								if($suspense_payments == 0 || in_array($pattern, ['e','f'])){
									if($first_row){
										$kari_values = \Model_MObicKari::query()->where('expense_type_code', '=', $expense_type_code)->get_one()->to_array();
										$kari = array_intersect_key($kari_values, $kari_keys);
										$column_34 = $payment->cor_suspense_payments + $payment->cor_settlement_amount;
									}else{
										$kari = $kari_keys;
										$column_34 = null;
									}
									$kashi = array_intersect_key($obic_kashi, $kari_keys);
								}

								//set content when form request has suspense_payments
								if(in_array($pattern,['a','b','c','d']) && $suspense_payments && isset($result)){
									if($result==0){
										if($first_row){
											$kari_values = $this->get_obic_karibarai_kashi(0);
											$kari = array_intersect_key($kari_values, $kari_keys);
											$column_34 = $payment->cor_suspense_payments;
										}else{
											$kari = $kari_keys;
											$column_34 = null;
										}
										$kashi = array_intersect_key($obic_kashi, $kari_keys);
									}else{
										if($first_row){
											$kari_values = $this->get_obic_karibarai_kashi(0);
											$kari = array_intersect_key($kari_values, $kari_keys);
											$kashi = array_intersect_key($obic_kashi, $kari_keys);
											$column_34 = $payment->cor_suspense_payments;
										}elseif($i==$j){
											if($result==2){
												$kari_values = $this->get_obic_karibarai_kashi(9);
												$kashi = array_intersect_key($kashi_values, $kari_keys);
												$kari = $kari_keys;
												$kari['karikata_bunseki_cd1'] = $kashi['karikata_bunseki_cd1'];
												$column_13 = 10000;
												$column_14 = $kashi['karikata_torihikisaki_cd'];
												$column_17 = abs($payment->cor_settlement_amount);
												$column_18 = $column_34 = null;
											}else{
												$kari_values = \Model_MObicKari::query()->where('expense_type_code', $expense_type_code)->get_one()->to_array();
												$kari = array_intersect_key($kari_values, $kari_keys);
												$kashi = $kari_keys;
												$column_34 = abs($payment->cor_settlement_amount);
												$column_13 = $column_14 = $column_17 = $column_18 = null;
											}
											$column_44 = $this->generate_summary_content('e', $prefix, null, null, null, $payment->user_create_form->fullname);
										}else{
											$kari = $kari_keys;
											$kashi = array_intersect_key($obic_kashi, $kari_keys);
											$column_34 = null;
										}
									}
								}
								//put content
								$content[] = [
									1,'T'.date('ymdhi'),$export_date,10,null,0,10,'000',$index,
									$kashi['karikata_sokanjokamoku_cd'],$kashi['karikata_hojokamoku_cd'],$kashi['karikata_hojouchiwakekamoku_cd'],
									$column_13,$column_14,$kashi['karikata_zei_kubun'],$kashi['karikata_zeikomi_kubun'],
									$column_17,$column_18,null,null,null,null,null,null,null,null,
									$kari['karikata_sokanjokamoku_cd'],$kari['karikata_hojokamoku_cd'],$kari['karikata_hojouchiwakekamoku_cd'],
									10000,$kari['karikata_torihikisaki_cd'],$kari['karikata_zei_kubun'],$kari['karikata_zeikomi_kubun'],
									$column_34,null,null,$kari['karikata_bunseki_cd1'],null,null,null,null,null,null,
									$column_44,$export_date.'【計上】立替精算',null,null,null
								];

								$i++;
								//increase index value
								$index++;
							}//end foreach
						}
						break;
				}//end switch

				//call API update form status
				$this->rest->request('system_formprocess/single_process','post',[
					'petition_id' => $payment->id,
					'petition_type' => 2,
					'process_type' => 'obic_export',
					'm_user_id' => $params['m_user_id'],
					'request_m_user_id' => $params['m_user_id']
				]);

				$ids[] = $payment->id;
			}//end if check response status
		}//end foreach payment

		//Save log t_obic_export_history
		\Model_TObicExportHistory::forge()->set([
			'request_user_id' => $params['m_user_id'],
			'login_user_id' => \Auth::get('id'),
			'type' => 'export_obic',
			'content' => json_encode($ids),
			'date_time' => date('Y-m-d H:i:s'),
		])->save();

		return $content;
    }

    /* ==============================================================
     *	Author: Hoang Phong Phu
     *	Function handle records from table t_request_transport_spec
     *	Params: $records = $payment->t_request_transport_spec,
     *			$client_type = 01 | 90,
     *			$cost_divide = $payment->t_cost_divide,
     *			$is_form_travel = true | false
     *	Return: array
	 * ============================================================== */
    protected function get_transportation_data($records, $client_type, $cost_divide, $is_form_travel){
    	$transports = $items = [];
		$amount = 0;

		foreach($records as $record){
			$money = is_null($record->cor_transportation_spec_fee) ? $record->transportation_spec_fee : $record->cor_transportation_spec_fee;
			$tax_value = $this->get_tax($record->use_date);
			$vat = 1 + ($tax_value / 100);
			$before_tax = ($money / $vat);
			$tax = $money - $before_tax;
			if(!isset($transports[$record->m_expense_item_id])){
				//get obic kashi data
				$kashi = $this->get_obic_kashi($record->m_expense_item_id, $client_type);
				$expense_item = \Model_MExpenseItem::find($record->m_expense_item_id);

				$transports[$record->m_expense_item_id] = [
					'tax' => $tax,
					'before_tax' => $before_tax,
					'tax_value' => $tax_value,
					'item' => $expense_item->item,
					'm_expense_item_id' => $record->m_expense_item_id,
					'karikata_sokanjokamoku_cd' => $kashi['karikata_sokanjokamoku_cd'],
					'karikata_hojokamoku_cd' => $kashi['karikata_hojokamoku_cd'],
					'karikata_hojouchiwakekamoku_cd' => $kashi['karikata_hojouchiwakekamoku_cd'],
					'karikata_zei_kubun' => $kashi['karikata_zei_kubun'],
					'karikata_zeikomi_kubun' => $kashi['karikata_zeikomi_kubun'],
					'm_department_id' => null,
					'department_code' => null
				];
			}else{
				$transports[$record->m_expense_item_id]['before_tax'] += $before_tax;
				$transports[$record->m_expense_item_id]['tax'] += $tax;
			}
			$amount += ($before_tax + $tax);
		}

		//create new array data by devide cost
		//case form is transportation, form has 1 transportation record and 1 or many cost divide record
		if($cost_divide && !$is_form_travel && count($transports) == 1){
			$temp = [];
			$transport = current($transports);
			$tax_value = $transport['tax_value'];
			foreach($cost_divide as $cost){
				$money = is_null($cost->cor_divide_cost) ? $cost->divide_cost : $cost->cor_divide_cost;
				$vat = 1 + ($tax_value / 100);
				$before_tax = round($money / $vat);
				$tax = $money - $before_tax;
				$temp[] = [
					'tax' => $tax,
					'before_tax' => $before_tax,
					'tax_value' => $tax_value,
					'item' => $transport['item'],
					'm_expense_item_id' => $transport['m_expense_item_id'],
					'karikata_sokanjokamoku_cd' => $transport['karikata_sokanjokamoku_cd'],
					'karikata_hojokamoku_cd' => $transport['karikata_hojokamoku_cd'],
					'karikata_hojouchiwakekamoku_cd' => $transport['karikata_hojouchiwakekamoku_cd'],
					'karikata_zei_kubun' => $transport['karikata_zei_kubun'],
					'karikata_zeikomi_kubun' => $transport['karikata_zeikomi_kubun'],
					'm_department_id' => $cost->m_department_id,
					'department_code' => \DB::select('code')
												->from('m_department')
												->where('id', $cost->m_department_id)
												->where('item_status','active')
												->execute()
												->get('code')
				];
			}
			//re-assign array transports
			$transports = $temp;
		}
		//case form is transportation, form has many trasportation records and only 1 cost divide record
		if($cost_divide && !$is_form_travel && count($cost_divide) == 1){
			$cost = current($cost_divide);
			$department_code = \DB::select('code')
									->from('m_department')
									->where('id', $cost->m_department_id)
									->where('item_status','active')
									->execute()
									->get('code');
			foreach($transports as $key => $value) {
				$transports[$key]['m_department_id'] = $cost->m_department_id;
				$transports[$key]['department_code'] = $department_code;
			}
		}
		//case form is travel and has only 1 cost divide record
		if($is_form_travel && count($cost_divide) == 1){
			$cost = current($cost_divide);
			$department_code = \DB::select('code')
									->from('m_department')
									->where('id', $cost->m_department_id)
									->where('item_status','active')
									->execute()
									->get('code');
			foreach($transports as $key => $value) {
				$transports[$key]['m_department_id'] = $cost->m_department_id;
				$transports[$key]['department_code'] = $department_code;
			}
		}

		$items = array_map(function($transport){
			$transport['before_tax'] = round($transport['before_tax']);
			$transport['tax'] = round($transport['tax']);
			return $transport;
		},$transports);

		return [
			'items' => $items,
			'amount' => $amount
		];
    }

    /* ==============================================================
     *	Author: Hoang Phong Phu
     *	Function handle records from table t_request_traveling_expenses
     *	Params: $record = $payment->t_request_traveling_expenses,
     *			$client_type = 01 | 90,
     * 			$cost_divide = $payment->t_cost_divide
     *	Return: array
	 * ============================================================== */
	protected function get_traveling_data($record, $client_type, $cost_divide){
    	$items = [];
		$amount = 0;
		$m_department_id = null;
		$department_code = null;
		$tax_value = $this->get_tax($record->settlement_date);
		//m_expense_item_id = 26 <=> item_name_code = 0400
		$kashi = $this->get_obic_kashi(26, $client_type);
		$money = ($record->cor_perdiem_fee ?: $record->perdiem_fee) + ($record->cor_lodging_fee ?: $record->lodging_fee);
		$vat = 1 + ($tax_value / 100);
		$before_tax = round($money / $vat);
		$tax = $money - $before_tax;

		$items[] = [
			'tax' => $tax,
			'before_tax' => $before_tax,
			'tax_value' => $tax_value,
			'item' => '宿泊費(日当)',
			'm_expense_item_id' => 26,
			'karikata_sokanjokamoku_cd' => $kashi['karikata_sokanjokamoku_cd'],
			'karikata_hojokamoku_cd' => $kashi['karikata_hojokamoku_cd'],
			'karikata_hojouchiwakekamoku_cd' => $kashi['karikata_hojouchiwakekamoku_cd'],
			'karikata_zei_kubun' => $kashi['karikata_zei_kubun'],
			'karikata_zeikomi_kubun' => $kashi['karikata_zeikomi_kubun'],
			'm_department_id' => $m_department_id,
			'department_code' => $department_code
		];
		$amount += $money;

		foreach($record->other as $other){
			$money = $other->cor_payments ?: $other->payments;
			//m_expense_item_id = 15 <=> item_name_code = 0401
			if($other->m_expense_item_id == 15){
				$tax = $money;
				$before_tax = null;
			}else{
				$before_tax = round($money / $vat);
				$tax = $money - $before_tax;
			}
			$kashi = $this->get_obic_kashi($other->m_expense_item_id, $client_type);
			$expense_item = \Model_MExpenseItem::find($other->m_expense_item_id);
			$items[] = [
				'tax' => $tax,
				'before_tax' => $before_tax,
				'tax_value' => $tax_value,
				'item' => $expense_item->item,
				'm_expense_item_id' => $other->m_expense_item_id,
				'karikata_sokanjokamoku_cd' => $kashi['karikata_sokanjokamoku_cd'],
				'karikata_hojokamoku_cd' => $kashi['karikata_hojokamoku_cd'],
				'karikata_hojouchiwakekamoku_cd' => $kashi['karikata_hojouchiwakekamoku_cd'],
				'karikata_zei_kubun' => $kashi['karikata_zei_kubun'],
				'karikata_zeikomi_kubun' => $kashi['karikata_zeikomi_kubun'],
				'm_department_id' => $m_department_id,
				'department_code' => $department_code
			];
			$amount += $money;
		}

		//case form has only 1 travel record and 1 or many cost divide record
		if(count($items) == 1 && $cost_divide){
			$temp = [];
			$item = current($items);
			$tax_value = $item['tax_value'];
			foreach($cost_divide as $cost){
				if(count($cost_divide) == 1){
					$before_tax = $item['before_tax'];
					$tax = $item['tax'];
				}else{
					$money = is_null($cost->cor_divide_cost) ? $cost->divide_cost : $cost->cor_divide_cost;
					$vat = 1 + ($tax_value / 100);
					$before_tax = round($money / $vat);
					$tax = $money - $before_tax;
				}

				$temp[] = [
					'tax' => $tax,
					'before_tax' => $before_tax,
					'tax_value' => $tax_value,
					'item' => $item['item'],
					'm_expense_item_id' => $item['m_expense_item_id'],
					'karikata_sokanjokamoku_cd' => $item['karikata_sokanjokamoku_cd'],
					'karikata_hojokamoku_cd' => $item['karikata_hojokamoku_cd'],
					'karikata_hojouchiwakekamoku_cd' => $item['karikata_hojouchiwakekamoku_cd'],
					'karikata_zei_kubun' => $item['karikata_zei_kubun'],
					'karikata_zeikomi_kubun' => $item['karikata_zeikomi_kubun'],
					'm_department_id' => $cost->m_department_id,
					'department_code' => \DB::select('code')
												->from('m_department')
												->where('id', $cost->m_department_id)
												->where('item_status','active')
												->execute()
												->get('code')
				];
			}
			//re-assign array items
			$items = $temp;
		}

		//case form has only 1 cost divide record
		elseif(count($cost_divide) == 1){
			$cost = current($cost_divide);
			$m_department_id = $cost->m_department_id;
			$department_code = \DB::select('code')
									->from('m_department')
									->where('id', $cost->m_department_id)
									->where('item_status','active')
									->execute()
									->get('code');
			foreach($items as $key => $value){
				$items[$key]['m_department_id'] = $m_department_id;
				$items[$key]['department_code'] = $department_code;
			}
		}

		return [
			'items' => $items,
			'amount' => $amount
		];
    }

    /* ==============================================================
     *	Author: Hoang Phong Phu
     *	Function handle records from table t_purchase_reception_spec
     *	Params: $records = $payment->t_purchase_reception_spec,
     *			$cost_divide = $payment->t_cost_divide
     *	Return: array
	 * ============================================================== */
    protected function get_purchase_data($records, $cost_divide){
    	$items = [];
		$amount = 0;

		if($records){
			$record = current($records);
			$tax_value = $this->get_tax($record->reception_date);

			if($cost_divide){
				foreach($cost_divide as $cost){
					$money = is_null($cost->cor_divide_cost) ? $cost->divide_cost : $cost->cor_divide_cost;
					$vat = 1 + ($tax_value / 100);
					$before_tax = round($money / $vat);
					$tax = $money - $before_tax;
					$items[] = [
						'tax' => $tax,
						'before_tax' => $before_tax,
						'm_department_id' => $cost->m_department_id,
						'department_code' => \DB::select('code')
												->from('m_department')
												->where('id', $cost->m_department_id)
												->where('item_status','active')
												->execute()
												->get('code')
					];
					$amount += $money;
				}
			}else{
				foreach($records as $record){
					$money = is_null($record->cor_payments) ? $record->payments : $record->cor_payments;
					$vat = 1 + ($tax_value / 100);
					$before_tax = round($money/$vat);
					$tax = $money - $before_tax;
					$items[] = [
						'tax' => $tax,
						'before_tax' => $before_tax,
						'm_department_id' => null,
						'department_code' => null
					];
					$amount += $money;
				}
			}
		}

		return [
			'items' => $items,
			'amount' => $amount
		];
    }



    /* ==============================================================
     *	Author: Hoang Phong Phu
     *	Function query data from table m_obic_kashi
     *	Params: $m_expense_item_id, client_type = 01 | 90
     *	Return: array
	 * ============================================================== */
    protected function get_obic_kashi($m_expense_item_id, $client_type){
    	$sql = '
			SELECT `karikata_sokanjokamoku_cd`, `karikata_hojokamoku_cd`, `karikata_hojouchiwakekamoku_cd`, `karikata_zei_kubun`, `karikata_zeikomi_kubun`
			FROM m_obic_kashi
			WHERE m_expense_item_id = :m_expense_item_id
				AND client_type = :client_type
				AND item_status = "active"
		';

		return \DB::query($sql)
					->parameters([
						'm_expense_item_id' => $m_expense_item_id,
						'client_type' => $client_type
					])
					->execute()
					->current();
    }

    /* ==============================================================
     *	Author: Hoang Phong Phu
     *	Function get tax value from table m_tax
     *	Params: $date
     *	Return: number
	 * ============================================================== */
    protected function get_tax($date){
    	$sql = '
			SELECT `value`
			FROM m_tax
			WHERE (
					(:use_date BETWEEN enable_start_date AND enable_end_date)
					OR
					(:use_date >= enable_start_date AND enable_end_date IS NULL)
				)
				AND item_status = "active"
		';

		return \DB::query($sql)->parameters(['use_date' => $date])
								->execute()
								->get('value');
    }

    protected function get_obic_karibarai_kashi($expense_type_code){
    	$karibarai_kashi_alias = [
			['kashikata_sokanjokamoku_cd','karikata_sokanjokamoku_cd'],
			['kashikata_hojokamoku_cd','karikata_hojokamoku_cd'],
			['kashikata_hojouchiwakekamoku_cd','karikata_hojouchiwakekamoku_cd'],
			['kashikata_torihikisaki_cd','karikata_torihikisaki_cd'],
			['kashikata_zei_kubun','karikata_zei_kubun'],
			['kashikata_zeikomi_kubun','karikata_zeikomi_kubun'],
			['kashikata_bunseki_cd1','karikata_bunseki_cd1'],
		];

    	return \DB::select_array($karibarai_kashi_alias)
					->from('m_obic_karibarai_kashi')
					->where('expense_type_code', $expense_type_code)
					->execute()
					->current();
    }

    /* ==============================================================
     *	Author: Hoang Phong Phu
     *	Function generate content of column 44
     *	Return: string
	 * ============================================================== */
    protected function generate_summary_content($pattern, $prefix, $expense_item, $user_department_code, $request_deparment_code, $fullname){
		$content = $prefix;
		if($pattern=='a'){
			$content .= ((strpos($expense_item,'決起会')!==false)?'決起会代('.$user_department_code.')/':$expense_item.'/');
		}elseif($pattern=='e' || $pattern=='f'){
			$content .= 'その他/';
		}else{
			$content .= ((strpos($expense_item,'決起会')!==false)?'決起会代':$expense_item);
			$content .= '【'.$request_deparment_code.'】/';
		}
		$content .= $fullname;
		return $content;
	}

	/*=============================================================
     * Author: Hoang Phong Phu
     * Function export file fb
     * Method GET
     * Params: date: export date,
     		   type: m_petition_status_id = 11,
     * Table t_request
     *=============================================================*/
	public function action_export_fb(){
		$objPHPExcel = new \PHPExcel();
		$param = \Input::param();
		parse_str(base64_decode($param['p']), $params);

		$query = \DB::select(
						'SM.*',
						'MU.bank_account_no', 'MU.bank_account_type_code', 'MU.bank_account_holder',
						\DB::expr('MB.code AS bank_code'), \DB::expr('MB.name_kana AS bank_name_kana'),
						\DB::expr('MBB.code AS bank_branch_code'), \DB::expr('MBB.name_kana AS bank_branch_name_kana')
					)
					->from(['t_request','SM'])
					->join(['m_user','MU'],'left')->on('MU.id','=','SM.m_user_id')
					->join(['m_bank','MB'],'left')->on('MB.id','=','MU.m_bank_id')
					->join(['m_bank_branch','MBB'],'left')->on('MBB.id','=','MU.m_bank_branch_id')
					->where('SM.m_petition_status_id', 11)
					->where('SM.obic_outeput_date', 'IS NOT', \DB::expr('NULL'))
					->where('SM.zenginkyo_outeput_date', 'IS', \DB::expr('NULL'))
					->where('SM.zenginkyo_output_hold_flg', 0)
					->where('SM.item_status','active');
		$requests =	$query->execute()->as_array();

		$users = $ids = [];
		$total = 0;
		$date = strtotime($params['date']);

		$response = new \Response();
		$response->set_header('Pragma','public')
						->set_header('Expires','0')
						->set_header('Cache-Control','must-revalidate, post-check=0, pre-check=0')
						->set_header('Content-Description','File Transfer')
						->set_header('Content-Type','text/csv; charset=utf-8')
						->set_header('Content-Disposition','attachment; filename="zenginkyo.txt')
						->set_header('Content-Transfer-Encoding','binary');

        $fp = fopen('php://output','w');
        if($fp){
        	if($requests){
				$str = '12104828530700'.mb_convert_encoding('ｶ)ﾋﾞｼﾞｮﾝ','SJIS')
						.str_repeat(' ',40-mb_strlen('ｶ)ﾋﾞｼﾞｮﾝ'))
						.date('md',$date)
						.'0009'.mb_convert_encoding('ﾐﾂｲｽﾐﾄﾓ','SJIS').
						str_repeat(' ',15-mb_strlen('ﾐﾂｲｽﾐﾄﾓ'))
						.'234'.mb_convert_encoding('ｼﾌﾞﾔｴｷﾏｴ','SJIS').
						str_repeat(' ',15-mb_strlen('ｼﾌﾞﾔｴｷﾏｴ')).
						'13293172'.str_repeat(' ',17)."\r\n";
				fputs($fp,$str);
				foreach($requests as $request){
					if(!isset($users[$request['m_user_id']])){
						$users[$request['m_user_id']] = [
							'bank_code' => $request['bank_code'],
							'bank_name_kana' => $request['bank_name_kana'],
							'bank_branch_code' => $request['bank_branch_code'],
							'bank_branch_name_kana' => $request['bank_branch_name_kana'],
							'bank_account_type_code' => $request['bank_account_type_code'],
							'bank_account_no' => $request['bank_account_no'],
							'bank_account_holder' => $request['bank_account_holder'],
							'total' => 0,
						];
					}

					if($request['type'] == 1 && !is_null($request['settlement_amount']) && is_null($request['cor_settlement_amount'])){
						$users[$request['m_user_id']]['total'] += $request['settlement_amount'];
					}elseif($request['type'] == 1 && !is_null($request['settlement_amount']) && !is_null($request['cor_settlement_amount'])){
						$users[$request['m_user_id']]['total'] += $request['cor_settlement_amount'];
					}elseif($request['type'] == 2 && $request['suspense_payments']){
						$users[$request['m_user_id']]['total'] += $request['suspense_payments'];
					}

					//update status
					$this->rest->request('system_formprocess/single_process','post',[
						'petition_id' => $request['id'],
						'petition_type' => 2,
						'process_type' => 'fb_export',
						'm_user_id' => $params['m_user_id'],
						'request_m_user_id' => $params['m_user_id']
					]);
				}

				foreach($users as $user){
					$total += $user['total'];
					$line = '2'.$user['bank_code'];
					$line .= (mb_strlen($user['bank_name_kana'])>15)?mb_convert_encoding(mb_substr($user['bank_name_kana'],0,15),'SJIS'):mb_convert_encoding($user['bank_name_kana'],'SJIS').str_repeat(' ',15-mb_strlen($user['bank_name_kana']));
					$line .= $user['bank_branch_code'];
					$line .= (mb_strlen($user['bank_branch_name_kana'])>15)?mb_convert_encoding(mb_substr($user['bank_branch_name_kana'],0,15),'SJIS'):mb_convert_encoding($user['bank_branch_name_kana'],'SJIS').str_repeat(' ',15-mb_strlen($user['bank_branch_name_kana']));
					$line .= str_repeat(' ',4);
					$line .= mb_substr($user['bank_account_type_code'],0,1).mb_substr($user['bank_account_no'],0,7);
					$line .= (mb_strlen($user['bank_account_holder'])>30)?mb_convert_encoding(mb_substr($user['bank_account_holder'],0,30),'SJIS'):mb_convert_encoding($user['bank_account_holder'],'SJIS').str_repeat(' ',30-mb_strlen($user['bank_account_holder']));
					$line .= (mb_strlen($user['total'])>10)?mb_substr($user['total'],0,10):str_repeat('0',10-mb_strlen($user['total'])).$user['total'];
					$line .= '1'.str_repeat('0',10).str_repeat('0',10).'7'.str_repeat(' ',1).str_repeat(' ',7);
					fputs($fp,$line."\r\n");
				}

				$line = "8";
				$count = count($users);
				$line .= (mb_strlen($count)>6)?mb_substr($count,0,6):str_repeat('0',6-mb_strlen($count)).$count;
				$line .= (mb_strlen($total)>12)?mb_substr($total,0,12):str_repeat('0',12-mb_strlen($total)).$total;
				fputs($fp,$line.str_repeat(' ',101)."\r\n");
				fputs($fp,'9'.str_repeat(' ',119)."\r\n");

				$ids = array_column($requests, 'id');
        	}
        }

        //Save log t_obic_export_history
		\Model_TObicExportHistory::forge()->set([
			'request_user_id' => $params['m_user_id'],
			'login_user_id' => \Auth::get('id'),
			'type' => 'export_fb',
			'content' => json_encode($ids),
			'date_time' => date('Y-m-d H:i:s'),
		])->save();

        fclose($fp);
		return $response;
	}
}